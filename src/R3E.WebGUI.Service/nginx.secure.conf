events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Security Headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), autoplay=(), encrypted-media=()" always;
    
    # Hide NGINX version
    server_tokens off;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;
    
    # Buffer sizes for security
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types 
        text/plain 
        text/css 
        text/xml 
        text/javascript 
        application/javascript 
        application/xml+rss 
        application/json
        application/xml
        image/svg+xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=deploy:10m rate=1r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Block common attack patterns
    map $request_uri $blocked {
        default 0;
        "~*\.(asp|aspx|php|jsp)" 1;
        "~*/wp-admin" 1;
        "~*/wp-login" 1;
        "~*/phpmyadmin" 1;
        "~*/admin" 1;
        "~*\.\.(.*)" 1;
        "~*<script" 1;
        "~*javascript:" 1;
        "~*union.*select" 1;
    }
    
    # Upstream for the API service
    upstream r3e_webgui_api {
        server r3e-webgui-service:8888;
        keepalive 32;
    }
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security: Block malicious requests
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        
        # Dummy SSL certificate for default server
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        
        # Block requests with common attack patterns
        if ($blocked) {
            return 444;
        }
        
        # Block requests without proper Host header
        if ($host !~* ^(service\.neoservicelayer\.com|.*\.service\.neoservicelayer\.com)$) {
            return 444;
        }
        
        return 444;
    }
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name service.neoservicelayer.com *.service.neoservicelayer.com;
        
        # Block malicious requests
        if ($blocked) {
            return 444;
        }
        
        # Rate limiting
        limit_req zone=general burst=50 nodelay;
        limit_conn addr 20;
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/html;
            allow all;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # Main API server (HTTPS)
    server {
        listen 443 ssl http2;
        server_name api.service.neoservicelayer.com;
        
        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/service.neoservicelayer.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/service.neoservicelayer.com/privkey.pem;
        
        # Block malicious requests
        if ($blocked) {
            return 444;
        }
        
        # Rate limiting and connection limits
        limit_conn addr 10;
        
        # API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://r3e_webgui_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "https://service.neoservicelayer.com https://*.service.neoservicelayer.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, X-API-Key" always;
            add_header Access-Control-Allow-Credentials true always;
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # Deploy endpoint with stricter rate limiting
        location /api/webgui/deploy {
            limit_req zone=deploy burst=5 nodelay;
            
            proxy_pass http://r3e_webgui_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # Health check
        location /health {
            proxy_pass http://r3e_webgui_api;
            access_log off;
            allow 127.0.0.1;
            allow ::1;
            deny all;
        }
        
        # Swagger documentation (production disabled for security)
        location /swagger/ {
            return 404;
        }
        
        # Block sensitive paths
        location ~ /\. {
            deny all;
        }
        
        location ~ \.(env|config|log|sql|bak|backup)$ {
            deny all;
        }
    }
    
    # Wildcard subdomain server for WebGUI hosting (contract.service.neoservicelayer.com)
    server {
        listen 443 ssl http2;
        server_name *.service.neoservicelayer.com;
        
        # SSL certificates (wildcard)
        ssl_certificate /etc/letsencrypt/live/service.neoservicelayer.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/service.neoservicelayer.com/privkey.pem;
        
        # Block malicious requests
        if ($blocked) {
            return 444;
        }
        
        # Rate limiting
        limit_req zone=general burst=30 nodelay;
        limit_conn addr 15;
        
        # Extract subdomain (this will be the contract name)
        set $subdomain "";
        if ($host ~* "^([^.]+)\.service\.neoservicelayer\.com$") {
            set $subdomain $1;
        }
        
        # Skip api subdomain (handled above)
        if ($subdomain = "api") {
            return 444;
        }
        
        # Validate subdomain format (alphanumeric and hyphens only)
        if ($subdomain !~ "^[a-zA-Z0-9\-]+$") {
            return 404;
        }
        
        # Serve WebGUI files
        location / {
            # Try to serve files from contract subdomain directory
            root /var/www/webgui/$subdomain;
            try_files $uri $uri/ /index.html;
            
            # If files don't exist, proxy to API for dynamic serving
            error_page 404 = @api_fallback;
            
            # Cache static assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Access-Control-Allow-Origin "*";
                gzip_static on;
            }
            
            # Security for HTML files
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
        }
        
        # Fallback to API for dynamic serving
        location @api_fallback {
            proxy_pass http://r3e_webgui_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # API endpoints for contract info
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://r3e_webgui_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Block sensitive files
        location ~ /\. {
            deny all;
        }
        
        location ~ \.(env|config|log|sql|bak|backup)$ {
            deny all;
        }
    }
    
    # Main domain server
    server {
        listen 443 ssl http2;
        server_name service.neoservicelayer.com;
        
        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/service.neoservicelayer.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/service.neoservicelayer.com/privkey.pem;
        
        # Block malicious requests
        if ($blocked) {
            return 444;
        }
        
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;
        
        # Serve information page
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>R3E WebGUI Service</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px; }
        .endpoint { background: #f8f9fa; padding: 15px; margin: 15px 0; border-left: 4px solid #007acc; }
        code { background: #e9ecef; padding: 2px 4px; border-radius: 3px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>R3E WebGUI Service</h1>
        <p>Neo Smart Contract WebGUI Hosting Service</p>
        
        <h2>API Endpoints</h2>
        <div class="endpoint">
            <strong>API Base URL:</strong> <code>https://api.service.neoservicelayer.com</code>
        </div>
        
        <h2>WebGUI Access</h2>
        <div class="endpoint">
            <strong>Pattern:</strong> <code>https://[contract-address].service.neoservicelayer.com</code><br>
            <small>Replace [contract-address] with your deployed contract address</small>
        </div>
        
        <h2>Security Features</h2>
        <ul>
            <li>SSL/TLS encryption with Let\'s Encrypt certificates</li>
            <li>Rate limiting and DDoS protection</li>
            <li>Security headers (HSTS, CSP, etc.)</li>
            <li>Malicious request filtering</li>
        </ul>
    </div>
</body>
</html>';
            add_header Content-Type "text/html; charset=utf-8";
        }
        
        # Health check
        location /health {
            proxy_pass http://r3e_webgui_api;
            access_log off;
        }
        
        # Block sensitive paths
        location ~ /\. {
            deny all;
        }
    }
}