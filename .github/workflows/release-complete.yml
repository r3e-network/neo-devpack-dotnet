name: Complete Release Process

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
      - '!v*.*.*-*'  # Exclude pre-release tags

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.300

    - name: Extract version from tag
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "üè∑Ô∏è Building release for version: $VERSION"

    # Build and Pack
    - name: Build solution
      run: |
        echo "üî® Building solution..."
        dotnet build -c Release

    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        dotnet test -c Release --no-build || echo "‚ö†Ô∏è Some tests failed, continuing..."

    - name: Pack all NuGet packages
      run: |
        echo "üì¶ Packing NuGet packages..."
        dotnet pack -c Release --no-build -o ./nupkgs
        
        echo "üìä Package summary:"
        echo "Total packages: $(ls ./nupkgs/*.nupkg | grep -v snupkg | wc -l)"
        echo "Neo packages: $(ls ./nupkgs/Neo*.nupkg 2>/dev/null | grep -v snupkg | wc -l)"
        echo "R3E packages: $(ls ./nupkgs/R3E*.nupkg 2>/dev/null | grep -v snupkg | wc -l)"

    # Build binaries for multiple platforms
    - name: Build Linux binary
      run: |
        echo "üêß Building Linux binary..."
        dotnet publish src/Neo.Compiler.CSharp.Tool/Neo.Compiler.CSharp.Tool.csproj \
          -c Release \
          -r linux-x64 \
          --self-contained true \
          /p:PublishSingleFile=true \
          /p:PublishTrimmed=false \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          -o ./publish/linux-x64
        
        cd publish/linux-x64
        chmod +x rncc
        tar -czf ../../rncc-linux-x64-v${{ env.VERSION }}.tar.gz rncc
        cd ../..

    - name: Build Windows binary
      run: |
        echo "ü™ü Building Windows binary..."
        dotnet publish src/Neo.Compiler.CSharp.Tool/Neo.Compiler.CSharp.Tool.csproj \
          -c Release \
          -r win-x64 \
          --self-contained true \
          /p:PublishSingleFile=true \
          /p:PublishTrimmed=false \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          -o ./publish/win-x64
        
        cd publish/win-x64
        zip -9 ../../rncc-win-x64-v${{ env.VERSION }}.zip rncc.exe
        cd ../..

    - name: Build macOS binary
      run: |
        echo "üçé Building macOS binary..."
        dotnet publish src/Neo.Compiler.CSharp.Tool/Neo.Compiler.CSharp.Tool.csproj \
          -c Release \
          -r osx-x64 \
          --self-contained true \
          /p:PublishSingleFile=true \
          /p:PublishTrimmed=false \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          -o ./publish/osx-x64
        
        cd publish/osx-x64
        chmod +x rncc
        tar -czf ../../rncc-osx-x64-v${{ env.VERSION }}.tar.gz rncc
        cd ../..

    # Publish to NuGet
    - name: Publish packages to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET }}
      run: |
        echo "üöÄ Publishing to NuGet..."
        
        # Publish in dependency order
        PACKAGES=(
          # Neo base packages first
          "Neo.Extensions"
          "Neo.Json"
          "Neo.IO"
          "Neo.VM"
          "Neo.Cryptography.BLS12_381"
          "Neo"
          
          # R3E packages
          "R3E.SmartContract.Framework"
          "R3E.Disassembler.CSharp"
          "R3E.SmartContract.Analyzer"
          "R3E.SmartContract.Testing"
          "R3E.Compiler.CSharp"
          "R3E.SmartContract.Deploy"
          "R3E.SmartContract.Template"
          "R3E.WebGUI.Service"
          "R3E.WebGUI.Deploy"
          "R3E.Compiler.CSharp.Tool"
        )
        
        SUCCESS=0
        FAILED=0
        
        for PKG in "${PACKAGES[@]}"; do
          PACKAGE=$(ls ./nupkgs/${PKG}.*.nupkg 2>/dev/null | grep -v snupkg | head -1)
          if [ -n "$PACKAGE" ]; then
            echo "üì§ Publishing $(basename $PACKAGE)..."
            if dotnet nuget push "$PACKAGE" \
              --source https://api.nuget.org/v3/index.json \
              --api-key "$NUGET_API_KEY" \
              --skip-duplicate; then
              echo "‚úÖ Published $(basename $PACKAGE)"
              SUCCESS=$((SUCCESS + 1))
            else
              echo "‚ùå Failed to publish $(basename $PACKAGE)"
              FAILED=$((FAILED + 1))
            fi
          else
            echo "‚ö†Ô∏è Package $PKG not found"
          fi
          sleep 1
        done
        
        echo ""
        echo "üìä Publishing Summary:"
        echo "‚úÖ Success: $SUCCESS packages"
        echo "‚ùå Failed: $FAILED packages"

    # Create GitHub Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./nupkgs/*.nupkg
          rncc-linux-x64-v${{ env.VERSION }}.tar.gz
          rncc-win-x64-v${{ env.VERSION }}.zip
          rncc-osx-x64-v${{ env.VERSION }}.tar.gz
          RELEASE_NOTES_v${{ env.VERSION }}.md
          CHANGELOG.md
          QUICK_START_v${{ env.VERSION }}.md
          MIGRATION_GUIDE_v${{ env.VERSION }}.md
        body_path: RELEASE_NOTES_v${{ env.VERSION }}.md
        name: R3E DevPack v${{ env.VERSION }} - First Major Release
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Post summary
    - name: Release Summary
      run: |
        echo "# üéâ Release v${{ env.VERSION }} Complete!"
        echo ""
        echo "## üì¶ Published Packages"
        echo "\`\`\`"
        ls -1 ./nupkgs/*.nupkg | grep -v snupkg | sed 's|./nupkgs/||'
        echo "\`\`\`"
        echo ""
        echo "## üîó Links"
        echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ env.VERSION }})"
        echo "- [NuGet Profile](https://www.nuget.org/profiles/R3E)"
        echo "- [RNCC Tool](https://www.nuget.org/packages/R3E.Compiler.CSharp.Tool/${{ env.VERSION }})"
        echo ""
        echo "## üöÄ Quick Start"
        echo "\`\`\`bash"
        echo "dotnet tool install -g R3E.Compiler.CSharp.Tool --version ${{ env.VERSION }}"
        echo "rncc new MyContract --template=solution"
        echo "\`\`\`"